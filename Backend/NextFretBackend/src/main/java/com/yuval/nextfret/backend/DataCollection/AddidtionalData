import java.net.*;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.util.*;
import org.json.JSONObject;

public class Main {

    public static void main(String[] args) {
        String dbUrl = "jdbc:postgresql://db.ecwsiekdjkjrnhqyqbgc.supabase.co:5432/postgres?sslmode=require";
        String dbUser = "postgres";
        String dbPass = "OrelYuval2025";

        int successCount = 0;
        int failCount = 0;

        ItunesCoverService itunesService = new ItunesCoverService();
        Map<String, Integer> genreCache = new HashMap<>();

        try (Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPass)) {

            PreparedStatement songsStmt = conn.prepareStatement(
                    "SELECT id, title, artist_id FROM songs WHERE id NOT IN (SELECT DISTINCT song_id FROM song_genres)"
            );
            ResultSet songs = songsStmt.executeQuery();

            while (songs.next()) {
                try {
                    int songId = songs.getInt("id");
                    String title = songs.getString("title");
                    int artistId = songs.getInt("artist_id");

                    if (artistId == 0) {
                        System.out.println("‚ö†Ô∏è Skipping song with no artist: " + songId);
                        failCount++;
                        continue;
                    }

                    String artist = "";
                    try (PreparedStatement artistStmt = conn.prepareStatement("SELECT name FROM artists WHERE id = ?")) {
                        artistStmt.setInt(1, artistId);
                        ResultSet artistRs = artistStmt.executeQuery();
                        if (artistRs.next()) {
                            artist = artistRs.getString("name");
                        }
                    }

                    String artworkUrl = itunesService.fetchFieldWithRetry(artist, title, "artworkUrl100").orElse(null);
                    String previewUrl = itunesService.fetchFieldWithRetry(artist, title, "previewUrl").orElse(null);
                    String genre = itunesService.fetchFieldWithRetry(artist, title, "primaryGenreName").orElse(null);

                    if (artworkUrl != null || previewUrl != null) {
                        try (PreparedStatement updateStmt = conn.prepareStatement(
                                "UPDATE songs SET artwork_url = COALESCE(?, artwork_url), preview_url = COALESCE(?, preview_url) WHERE id = ?"
                        )) {
                            updateStmt.setString(1, artworkUrl);
                            updateStmt.setString(2, previewUrl);
                            updateStmt.setInt(3, songId);
                            updateStmt.executeUpdate();
                        }
                    }

                    if (genre != null) {
                        int genreId = genreCache.getOrDefault(genre.toLowerCase(), -1);

                        if (genreId == -1) {
                            try (PreparedStatement checkGenre = conn.prepareStatement(
                                    "SELECT id FROM genres WHERE LOWER(name) = LOWER(?)"
                            )) {
                                checkGenre.setString(1, genre);
                                ResultSet genreRs = checkGenre.executeQuery();
                                if (genreRs.next()) {
                                    genreId = genreRs.getInt("id");
                                }
                            }

                            if (genreId == -1) {
                                try (PreparedStatement insertGenre = conn.prepareStatement(
                                        "INSERT INTO genres(name) VALUES (?) RETURNING id"
                                )) {
                                    insertGenre.setString(1, genre);
                                    ResultSet newGenreRs = insertGenre.executeQuery();
                                    if (newGenreRs.next()) {
                                        genreId = newGenreRs.getInt("id");
                                    }
                                }
                            }

                            genreCache.put(genre.toLowerCase(), genreId);
                        }

                        try (PreparedStatement checkLink = conn.prepareStatement(
                                "SELECT 1 FROM song_genres WHERE song_id = ? AND genre_id = ?"
                        )) {
                            checkLink.setInt(1, songId);
                            checkLink.setInt(2, genreId);
                            ResultSet exists = checkLink.executeQuery();
                            if (!exists.next()) {
                                try (PreparedStatement insertLink = conn.prepareStatement(
                                        "INSERT INTO song_genres(song_id, genre_id) VALUES (?, ?)"
                                )) {
                                    insertLink.setInt(1, songId);
                                    insertLink.setInt(2, genreId);
                                    insertLink.executeUpdate();
                                }
                            }
                        }
                    }

                    System.out.println("‚úÖ Updated song ID: " + songId);
                    successCount++;

                } catch (Exception e) {
                    System.err.println("‚ùå Failed to process song. Skipping.");
                    e.printStackTrace();
                    failCount++;
                }

                try {
                    Thread.sleep(250);
                } catch (InterruptedException ignored) {}
            }

            System.out.println("üéâ Done.");
            System.out.println("‚úÖ Total successful updates: " + successCount);
            System.out.println("‚ùå Total failed updates: " + failCount);

        } catch (Exception e) {
            System.err.println("‚ùå Critical database error");
            e.printStackTrace();
        }
    }

    static class ItunesCoverService {
        public Optional<String> fetchFieldWithRetry(String artist, String title, String field) {
            for (int attempt = 1; attempt <= 2; attempt++) {
                Optional<String> result = fetchField(artist, title, field);
                if (result.isPresent()) return result;
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ignored) {}
            }
            return Optional.empty();
        }

        public Optional<String> fetchField(String artist, String title, String field) {
            try {
                String term = URLEncoder.encode(artist + " " + title, StandardCharsets.UTF_8);
                String urlStr = "https://itunes.apple.com/search?term=" + term + "&entity=song&limit=1";

                HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection();
                conn.setRequestMethod("GET");
                conn.setRequestProperty("User-Agent", "Mozilla/5.0");

                int responseCode = conn.getResponseCode();
                if (responseCode == 403) {
                    System.err.println("üîí 403 Forbidden for: " + term);
                    return Optional.empty();
                } else if (responseCode != 200) {
                    System.err.println("‚ùå iTunes API error " + responseCode + " for: " + term);
                    return Optional.empty();
                }

                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) response.append(line);
                in.close();

                JSONObject json = new JSONObject(response.toString());
                if (json.getInt("resultCount") > 0) {
                    return Optional.ofNullable(json.getJSONArray("results").getJSONObject(0).optString(field, null));
                }

            } catch (Exception e) {
                System.err.println("‚ùå Error fetching from iTunes: " + e.getMessage());
            }

            return Optional.empty();
        }
    }
}